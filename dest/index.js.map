{"version":3,"file":"index.js","sources":["src/commitInfo.js","src/server.js","src/index.js"],"sourcesContent":["const Future = require(\"ramda-fantasy\").Future;\n\nconst exec = require(\"child_process\").exec;\n\n/**\n * [commitInfo description]\n * @return {Future<String>} Response containing hash, person who committed, date and commit message\n */\nexport default function commitInfo() {\n    return new Future((reject, resolve) => {\n      // Go to current directory, get the git log and return the first 6 lines\n        exec(\n        `cd ${__dirname} && git log | head -n 6`,\n        (err, stdout, stderr) => {\n            const rawOutput = stderr\n            ? (`${stdout}\\n\\nERROR:\\n${stderr}`)\n            : stdout;\n\n            const output = rawOutput.replace(/\\n/g, \"<br>\");\n\n            resolve(output);\n            if (err) {\n                reject(err);\n            }\n        });\n    });\n}\n","import express from \"express\";\nimport commitInfo from \"./commitInfo\";\n\nconst app = express();\nconst PORT = 8080;\n\nconst requestSources = new Set();\n\n\nexport default function () {\n    app.get(\"/\", (req, res) => {\n        requestSources.add(req.query.message);\n        res.send(`Hello Automation! Are you working? ${Array.from(requestSources.keys()).join()}`);\n    });\n\n    app.get(\"/version\", (req, res) => {\n        commitInfo().fork(out => res.send(out), out => res.send(out));\n    });\n\n    app.listen(PORT, () => {\n        console.log(\"Example app listening on port PORT!\");\n    });\n}\n","import server from \"./server\";\n\nserver();\n"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC;;AAE/C,MAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;;;;;;AAM3C,AAAe,SAAS,UAAU,GAAG;IACjC,OAAO,IAAI,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,KAAK;;QAEnC,IAAI;QACJ,CAAC,GAAG,EAAE,SAAS,CAAC,uBAAuB,CAAC;QACxC,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,KAAK;YACrB,MAAM,SAAS,GAAG,MAAM;eACrB,CAAC,EAAE,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;cACjC,MAAM,CAAC;;YAET,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;;YAEhD,OAAO,CAAC,MAAM,CAAC,CAAC;YAChB,IAAI,GAAG,EAAE;gBACL,MAAM,CAAC,GAAG,CAAC,CAAC;aACf;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;CACN;;ACvBD,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,IAAI,GAAG,IAAI,CAAC;;AAElB,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;;;AAGjC,aAAe,YAAY;IACvB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK;QACvB,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACtC,GAAG,CAAC,IAAI,CAAC,CAAC,mCAAmC,EAAE,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;KAC9F,CAAC,CAAC;;IAEH,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK;QAC9B,UAAU,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KACjE,CAAC,CAAC;;IAEH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM;QACnB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;KACtD,CAAC,CAAC;CACN,CAAA;;ACpBD,MAAM,EAAE,CAAC,;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL21hcmNlbG8vUHJvZ3JhbXMvUHJvamVjdHMvVGVzdHMvZHVtbXktc2VydmVyL3NyYy9jb21taXRJbmZvLmpzIiwiL2hvbWUvbWFyY2Vsby9Qcm9ncmFtcy9Qcm9qZWN0cy9UZXN0cy9kdW1teS1zZXJ2ZXIvc3JjL3NlcnZlci5qcyIsIi9ob21lL21hcmNlbG8vUHJvZ3JhbXMvUHJvamVjdHMvVGVzdHMvZHVtbXktc2VydmVyL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBGdXR1cmUgPSByZXF1aXJlKFwicmFtZGEtZmFudGFzeVwiKS5GdXR1cmU7XG5cbmNvbnN0IGV4ZWMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKS5leGVjO1xuXG4vKipcbiAqIFtjb21taXRJbmZvIGRlc2NyaXB0aW9uXVxuICogQHJldHVybiB7RnV0dXJlPFN0cmluZz59IFJlc3BvbnNlIGNvbnRhaW5pbmcgaGFzaCwgcGVyc29uIHdobyBjb21taXR0ZWQsIGRhdGUgYW5kIGNvbW1pdCBtZXNzYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbW1pdEluZm8oKSB7XG4gICAgcmV0dXJuIG5ldyBGdXR1cmUoKHJlamVjdCwgcmVzb2x2ZSkgPT4ge1xuICAgICAgLy8gR28gdG8gY3VycmVudCBkaXJlY3RvcnksIGdldCB0aGUgZ2l0IGxvZyBhbmQgcmV0dXJuIHRoZSBmaXJzdCA2IGxpbmVzXG4gICAgICAgIGV4ZWMoXG4gICAgICAgIGBjZCAke19fZGlybmFtZX0gJiYgZ2l0IGxvZyB8IGhlYWQgLW4gNmAsXG4gICAgICAgIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByYXdPdXRwdXQgPSBzdGRlcnJcbiAgICAgICAgICAgID8gKGAke3N0ZG91dH1cXG5cXG5FUlJPUjpcXG4ke3N0ZGVycn1gKVxuICAgICAgICAgICAgOiBzdGRvdXQ7XG5cbiAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IHJhd091dHB1dC5yZXBsYWNlKC9cXG4vZywgXCI8YnI+XCIpO1xuXG4gICAgICAgICAgICByZXNvbHZlKG91dHB1dCk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBjb21taXRJbmZvIGZyb20gXCIuL2NvbW1pdEluZm9cIjtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgUE9SVCA9IDgwODA7XG5cbmNvbnN0IHJlcXVlc3RTb3VyY2VzID0gbmV3IFNldCgpO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuZ2V0KFwiL1wiLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgcmVxdWVzdFNvdXJjZXMuYWRkKHJlcS5xdWVyeS5tZXNzYWdlKTtcbiAgICAgICAgcmVzLnNlbmQoYEhlbGxvIEF1dG9tYXRpb24hIEFyZSB5b3Ugd29ya2luZz8gJHtBcnJheS5mcm9tKHJlcXVlc3RTb3VyY2VzLmtleXMoKSkuam9pbigpfWApO1xuICAgIH0pO1xuXG4gICAgYXBwLmdldChcIi92ZXJzaW9uXCIsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBjb21taXRJbmZvKCkuZm9yayhvdXQgPT4gcmVzLnNlbmQob3V0KSwgb3V0ID0+IHJlcy5zZW5kKG91dCkpO1xuICAgIH0pO1xuXG4gICAgYXBwLmxpc3RlbihQT1JULCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgUE9SVCFcIik7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgc2VydmVyIGZyb20gXCIuL3NlcnZlclwiO1xuXG5zZXJ2ZXIoKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUM7O0FBRS9DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUM7Ozs7OztBQU0zQyxBQUFlLFNBQVMsVUFBVSxHQUFHO0lBQ2pDLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxLQUFLOztRQUVuQyxJQUFJO1FBQ0osQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLHVCQUF1QixDQUFDO1FBQ3hDLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEtBQUs7WUFDckIsTUFBTSxTQUFTLEdBQUcsTUFBTTtlQUNyQixDQUFDLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztjQUNqQyxNQUFNLENBQUM7O1lBRVQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7O1lBRWhELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQixJQUFJLEdBQUcsRUFBRTtnQkFDTCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDZjtTQUNKLENBQUMsQ0FBQztLQUNOLENBQUMsQ0FBQztDQUNOOztBQ3ZCRCxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRWxCLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7OztBQUdqQyxhQUFlLFlBQVk7SUFDdkIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLO1FBQ3ZCLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5RixDQUFDLENBQUM7O0lBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLO1FBQzlCLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2pFLENBQUMsQ0FBQzs7SUFFSCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN0RCxDQUFDLENBQUM7Q0FDTixDQUFBOztBQ3BCRCxNQUFNLEVBQUUsQ0FBQyw7OyJ9"}